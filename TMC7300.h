//
// TMC7300
//
// Author   : Jim Herd
// Date     : Oct 2021

#ifndef __TMC7300_H__
#define __TMC3700_H__

//#include "pico/stdlib.h"
#include    "Pico_IO.h"
#include    "pico/binary_info.h"

//                                                                              
// 
//    
#define     UART_PORT        uart0  
#define     BAUD_RATE       115200    

#define     UART_TX_PIN     GP0         // Pin 1
#define     UART_RX_PIN     GP1         // Pin 2

void  TMC7300_Init(void);

 #define  register_GCONF             0x00
 #define  register_GSTAT             0x01
 #define  register_IFCNT             0x02
 #define  register_SLAVECONF         0x03
 #define  register_IOIN              0x06
 #define  register_CURRENT_LIMIT     0x10
 #define  register_PWM_AB            0x22
 #define  register_CHOPCONF          0x6C
 #define  register_DRV_STATUS        0x6F
 #define  register_PWMCONF           0x70

// Register GCONF
#define PWM_DIRECT        0x00000001
#define EXTCAP            0x00000002
#define PAR_MODE          0x00000004
#define TEST_MODE         0x00000080

// Register  GSTAT
#define RESET            0x00000001
#define DRV_ERR          0x00000002
#define U3V5             0x00000004

// Register  IFCNT
#define IFCNT            0x000000FF

// Register  SLAVECONF
#define SLAVECONF        0x00000F00

// Register  IOIN
#define EN                0x00000001
#define NSTDBY            0x00000002
#define AD0               0x00000004
#define AD1               0x00000008
#define DIAG              0x00000010
#define UART_ENABLED      0x00000020
#define UART_INPUT        0x00000040
#define MODE_INPUT        0x00000080
#define A2                0x00000100
#define A1                0x00000200
#define COMP_A1A2         0x00000400 
#define COMP_B1B2         0x00000800

// Register  CURRENT_LIMIT
#define MOTORRUN         0x00000001
#define IRUN             0x00001F00

// Register  PWM_AB
#define PWM_A            0x000001FF
#define PWM_B            0x01FF0000
#define PWM_AB           0x000001FF

// Register  CHOPCONF
#define ENABLEDRV        0x00000001
#define TBL              0x00018000
#define DISS2G           0x40000000
#define DISS2VS          0x80000000

// Register  DRV_STATUS
#define OTPW             0x00000001 
#define OT               0x00000002 
#define S2GA             0x00000004 
#define S2GB             0x00000008 
#define S2VSA            0x00000010
#define S2VSB            0x00000020
#define OLA              0x00000040
#define OLB              0x00000080 
#define T120             0x00000100
#define T150             0x00000200

// Register  PWMCONF
#define PWM_FREQ         0x00030000
#define FREEWHEEL        0x00300000

//==============================================================================
// Look-up table for CRC8 calculation.
//==============================================================================

/**
 * @brief Look-up table for CRC8 calculation.
 * 
 * @note    Tables of 8-bit vales for polynomial (8,4,2,1).
 *          Polynomial used by Trinamic TMC7300 H-bridge chip.
 * 
 *          Values generated by on-line tool :
 *          https://www.sunshine2k.de/coding/javascript/crc/crc_js.html
 */
static const uint8_t TMC7300_crc_table[] = {
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31,
    0x24, 0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65,
    0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9,
    0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1,
    0xb4, 0xb3, 0xba, 0xbd, 0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2,
    0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe,
    0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16,
    0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42,
    0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e, 0x87, 0x80,
    0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8,
    0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c,
    0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10,
    0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f,
    0x6a, 0x6d, 0x64, 0x63, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b,
    0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7,
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};



//==============================================================================
// typedef definitions
//==============================================================================

typedef struct TMC7300_write_datagram {
    uint8_t     sync_byte;
    uint8_t     slave_address;
    uint8_t     register_address;
    uint32_t    data;
    uint8_t     crc;
} TMC7300_write_datagram_t;

typedef struct TMC7300_read_datagram {
    uint8_t     sync_byte;
    uint8_t     slave_address;
    uint8_t     register_address;
    uint8_t     crc;
} TMC7300_read_datagram_t;

typedef struct TMC7300_read_reply_datagram {
    uint8_t     sync_byte;
    uint8_t     master_address;
    uint8_t     register_address;
    uint32_t    data;
    uint8_t     crc;
} TMC7300_read_reply_datagram_t;

//==============================================================================
// Function prototypes.
//==============================================================================

void    TMC7300_write_reg(TMC7300_write_datagram_t *datagram);
uint8_t TMC7300_CRC8(uint8_t *data, uint32_t bytes);
uint8_t TMC7300_CRC8(uint8_t *data, uint32_t bytes);

#endif
